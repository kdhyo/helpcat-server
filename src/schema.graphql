scalar DateTime

type Query {
  userAll: [User]
  user: User!
  hello(name: String): String
}

type Mutation {
  signup(
    email: String!
    password: String!
    userName: String!
    nickName: String!
    gender: String!
    phone: String!
    address: String!
    birh: String!
  ): AuthPayload!
  login(userid: String!, password: String!): AuthPayload!
  UserDelete: Boolean!
  updatePassword(oldPassword: String, newPassword: String!): Boolean!
  serviceUproad(
    title: String!
    contents: String!
    price: Int
    address: String
    startAt: String
    endAt: String
  ): Service!
}

type Subscription {
  newService: Service
}

type User {
  id: ID!
  email: String
  emailvalidated: Boolean
  validateEmailToken: String
  password: String
  userName: String
  nickName: String
  gender: String
  phone: String
  address: String
  birh: String
  createdAt: DateTime
}

type AuthPayload {
  token: String
  user: User
}

type Service {
  id: ID
  title: String
  contents: String
  address: String
  price: Int
  progress: Boolean
  startAt: DateTime
  endAt: DateTime
  reqUser: User
  ansUser: User
}
