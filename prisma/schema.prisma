generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id             Int          @id @default(autoincrement())
  email          String?      @unique
  password       String
  userName       String
  nickName       String?      @unique
  gender         String
  phone          String
  address1       String
  address2       String?
  lat            Float?
  lon            Float?
  birth          String
  ratingAvg      Float?
  ratingCount    Int          @default(0)
  alarm          Boolean?     @default(false)
  createdAt      DateTime     @default(now())
  fromTouser     message[]    @relation("message_fromTouser")
  toTouser       message[]    @relation("message_toTouser")
  rating_ansUser rating[]     @relation("rating_ansUserIdTouser")
  rating_reqUser rating[]     @relation("rating_reqUserIdTouser")
  ansUser        service[]    @relation("service_ansUserIdTouser")
  reqUser        service[]    @relation("service_reqUserIdTouser")
  useronroom     useronroom[]
}

model rating {
  id             Int      @id @default(autoincrement())
  reqUserId      Int?
  ansUserId      Int?
  serviceId      Int?
  rating         Float?
  review         String?
  createdAt      DateTime @default(now())
  rating_ansUser user?    @relation("rating_ansUserIdTouser", fields: [ansUserId], references: [id])
  rating_reqUser user?    @relation("rating_reqUserIdTouser", fields: [reqUserId], references: [id])
  service        service? @relation(fields: [serviceId], references: [id])

  @@index([ansUserId], name: "ansUserId")
  @@index([reqUserId], name: "reqUserId")
  @@index([serviceId], name: "serviceId")
}

model room {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  message    message[]
  useronroom useronroom[]
}

model service {
  id              Int               @id @default(autoincrement())
  reqUserId       Int?
  ansUserId       Int?
  title           String
  contents        String
  address1        String
  address2        String?
  lat             Float?
  lon             Float?
  price           Int
  progress        Boolean?          @default(false)
  createdAt       DateTime          @default(now())
  startAt         DateTime          @default(now())
  endAt           DateTime          @default(now())
  ansUser         user?             @relation("service_ansUserIdTouser", fields: [ansUserId], references: [id])
  reqUser         user?             @relation("service_reqUserIdTouser", fields: [reqUserId], references: [id])
  rating          rating[]
  serviceimgfiles serviceimgfiles[]

  @@index([ansUserId], name: "ansUserId")
  @@index([reqUserId], name: "reqUserId")
}

model message {
  id            Int      @id @default(autoincrement())
  text          String
  from          Int?
  to            Int?
  room          Int?
  createdAt     DateTime @default(now())
  fromTouser    user?    @relation("message_fromTouser", fields: [from], references: [id])
  messageToroom room?    @relation(fields: [room], references: [id])
  toTouser      user?    @relation("message_toTouser", fields: [to], references: [id])

  @@index([from], name: "from")
  @@index([room], name: "room")
  @@index([to], name: "to")
}

model useronroom {
  id        Int      @id @default(autoincrement())
  roomId    Int?
  userId    Int?
  createdAt DateTime @default(now())
  room      room?    @relation(fields: [roomId], references: [id])
  user      user?    @relation(fields: [userId], references: [id])

  @@index([roomId], name: "roomId")
  @@index([userId], name: "userId")
}

model serviceimgfiles {
  id        Int      @id @default(autoincrement())
  serviceId Int?
  imglink   String?  @unique
  createdAt DateTime @default(now())
  service   service? @relation(fields: [serviceId], references: [id])

  @@index([serviceId], name: "serviceId")
}
